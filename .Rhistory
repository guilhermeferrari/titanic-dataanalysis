if (use.lower.limit) {
X.plot <- X.plot + geom_hline(yintercept = lower.process.limit, linetype="dashed") +
annotate(geom="text", x=nrow(count.df)+1, y=lower.process.limit + 0.5, label=round(lower.process.limit, 2), colour="black",
size=4, family="sans", fontface="plain")
}
if (length(outliers > 0)) {
X.plot <- X.plot + geom_point(data=count.df[outliers,], aes(x = labels, y = x.values), colour="red", size=2)
}
X.plot
X.plot <- ggplot(data = count.df, aes(x = labels, y = x.values)) +
geom_line() +
geom_point() +
geom_hline(yintercept = x.values.avg) +
annotate(geom="text", x=nrow(count.df)+1, y=x.values.avg + 0.5, label=round(x.values.avg, 2), colour="black",
size=4, family="sans", fontface="plain") +
geom_hline(yintercept = upper.process.limit, linetype="dashed") +
annotate(geom="text", x=nrow(count.df)+1, y=upper.process.limit + 0.5, label=round(upper.process.limit, 2), colour="black",
size=4, family="sans", fontface="plain")
if (use.lower.limit) {
X.plot <- X.plot + geom_hline(yintercept = lower.process.limit, linetype="dashed") +
annotate(geom="text", x=nrow(count.df)+1, y=lower.process.limit + 0.5, label=round(lower.process.limit, 2), colour="black",
size=4, family="sans", fontface="plain")
}
if (length(outliers > 0)) {
X.plot <- X.plot + geom_point(data=count.df[outliers,], aes(x = labels, y = x.values), colour="red", size=3)
}
X.plot
mR.plot <- ggplot(data = x.ranges.df, aes(x = seq(2, nrow(x.ranges.df)), y = moving.range)) +
geom_line() +
geom_point() +
geom_hline(yintercept = average.moving.range) +
annotate(geom="text", x=21, y=average.moving.range + 1, label=average.moving.range, colour="black",
size=4, family="sans", fontface="plain") +
geom_hline(yintercept = upper.range.limit, linetype="dashed") +
annotate(geom="text", x=21, y=upper.range.limit + 1, label=round(upper.range.limit, 2), colour="black",
size=4, family="sans", fontface="plain") +
ylab("mR") +
theme(axis.title.y = element_text(angle=0), axis.title.x = element_blank()) +
coord_fixed(ratio = 0.2) +
scale_y_continuous(breaks=seq(0, 30, by=10))
mR.plot
mR.plot <- ggplot(data = x.ranges.df, aes(x = seq(2, nrow(x.ranges.df) + 1), y = moving.range)) +
geom_line() +
geom_point() +
geom_hline(yintercept = average.moving.range) +
annotate(geom="text", x=21, y=average.moving.range + 1, label=average.moving.range, colour="black",
size=4, family="sans", fontface="plain") +
geom_hline(yintercept = upper.range.limit, linetype="dashed") +
annotate(geom="text", x=21, y=upper.range.limit + 1, label=round(upper.range.limit, 2), colour="black",
size=4, family="sans", fontface="plain") +
ylab("mR") +
theme(axis.title.y = element_text(angle=0), axis.title.x = element_blank()) +
coord_fixed(ratio = 0.2) +
scale_y_continuous(breaks=seq(0, 30, by=10))
mR.plot
mR.plot <- ggplot(data = x.ranges.df, aes(x = seq(2, nrow(x.ranges.df) + 1), y = moving.range)) +
geom_line() +
geom_point() +
geom_hline(yintercept = average.moving.range) +
annotate(geom="text", x=nrow(x.ranges.df) + 2, y=average.moving.range + 1, label=average.moving.range, colour="black",
size=4, family="sans", fontface="plain") +
geom_hline(yintercept = upper.range.limit, linetype="dashed") +
annotate(geom="text", x=nrow(x.ranges.df) + 2, y=upper.range.limit + 1, label=round(upper.range.limit, 2), colour="black",
size=4, family="sans", fontface="plain") +
ylab("mR") +
theme(axis.title.y = element_text(angle=0), axis.title.x = element_blank()) +
coord_fixed(ratio = 0.2) +
scale_y_continuous(breaks=seq(0, 30, by=10))
mR.plot
library(gridExtra)
grid.arrange(X.plot, mR.plot, ncol = 1, nrow = 2)
mR.plot <- ggplot(data = x.ranges.df, aes(x = seq(2, nrow(x.ranges.df) + 1), y = moving.range)) +
geom_line() +
geom_point() +
geom_hline(yintercept = average.moving.range) +
annotate(geom="text", x=nrow(x.ranges.df) + 2, y=average.moving.range + 1, label=average.moving.range, colour="black",
size=4, family="sans", fontface="plain") +
geom_hline(yintercept = upper.range.limit, linetype="dashed") +
annotate(geom="text", x=nrow(x.ranges.df) + 2, y=upper.range.limit + 1, label=round(upper.range.limit, 2), colour="black",
size=4, family="sans", fontface="plain") +
ylab("mR") +
theme(axis.title.x = element_blank()) +
coord_fixed(ratio = 0.2) +
scale_y_continuous(breaks=seq(0, 30, by=10))
grid.arrange(X.plot, mR.plot, ncol = 1, nrow = 2)
View(count.df)
View(x.ranges)
count.data <- c(27, 19, 18, 16, 16, 12, 15, 13, 16, 16, 9, 17, 21, 15, 39, 21, 14, 23, 19, 29, 30)
library(ggplot2)
use.lower.limit = TRUE
# Build data frame for use with ggplot2
count.df <- data.frame(labels = seq(1, length(count.data)), x.values = count.data)
# Build moving ranges data
x.ranges.df <- data.frame(first = count.data[1:length(count.data)-1], second = count.data[2:length(count.data)])
x.ranges.df$moving.range <- abs(x.ranges.df$first - x.ranges.df$second)
# Calculations for moving range
average.moving.range <- mean(x.ranges.df$moving.range)
upper.range.limit <- average.moving.range * 3.27
# Calculations for X values
x.values.avg <- mean(count.df$x.values)
upper.process.limit <- x.values.avg + (2.66 * average.moving.range)
lower.process.limit <- x.values.avg - (2.66 * average.moving.range)
outliers <- which(count.df$x.values <= lower.process.limit | count.df$x.values >= upper.process.limit)
X.plot <- ggplot(data = count.df, aes(x = labels, y = x.values)) +
geom_line() +
geom_point() +
geom_hline(yintercept = x.values.avg) +
annotate(geom="text", x=nrow(count.df)+1, y=x.values.avg + 0.5, label=round(x.values.avg, 2), colour="black",
size=4, family="sans", fontface="plain") +
geom_hline(yintercept = upper.process.limit, linetype="dashed") +
annotate(geom="text", x=nrow(count.df)+1, y=upper.process.limit + 0.5, label=round(upper.process.limit, 2), colour="black",
size=4, family="sans", fontface="plain")
if (use.lower.limit) {
X.plot <- X.plot + geom_hline(yintercept = lower.process.limit, linetype="dashed") +
annotate(geom="text", x=nrow(count.df)+1, y=lower.process.limit + 0.5, label=round(lower.process.limit, 2), colour="black",
size=4, family="sans", fontface="plain")
}
if (length(outliers > 0)) {
X.plot <- X.plot + geom_point(data=count.df[outliers,], aes(x = labels, y = x.values), colour="red", size=3)
}
mR.plot <- ggplot(data = x.ranges.df, aes(x = seq(2, nrow(x.ranges.df) + 1), y = moving.range)) +
geom_line() +
geom_point() +
geom_hline(yintercept = average.moving.range) +
annotate(geom="text", x=nrow(x.ranges.df) + 2, y=average.moving.range + 1, label=average.moving.range, colour="black",
size=4, family="sans", fontface="plain") +
geom_hline(yintercept = upper.range.limit, linetype="dashed") +
annotate(geom="text", x=nrow(x.ranges.df) + 2, y=upper.range.limit + 1, label=round(upper.range.limit, 2), colour="black",
size=4, family="sans", fontface="plain") +
ylab("mR") +
theme(axis.title.x = element_blank()) +
coord_fixed(ratio = 0.2) +
scale_y_continuous(breaks=seq(0, 30, by=10))
library(gridExtra)
grid.arrange(X.plot, mR.plot, ncol = 1, nrow = 2)
X.plot <- ggplot(data = count.df, aes(x = labels, y = x.values)) +
geom_line() +
geom_point() +
geom_hline(yintercept = x.values.avg) +
annotate(geom="text", x=nrow(count.df)+1, y=x.values.avg + 0.5, label=round(x.values.avg, 2), colour="black",
size=4, family="sans", fontface="plain") +
geom_hline(yintercept = upper.process.limit, linetype="dashed") +
annotate(geom="text", x=nrow(count.df)+1, y=upper.process.limit + 0.5, label=round(upper.process.limit, 2), colour="black",
size=4, family="sans", fontface="plain") +
scale_y_continuous(breaks=seq(0, 40, by=10), formatter = function(x) format(x, width = 5))
if (use.lower.limit) {
X.plot <- X.plot + geom_hline(yintercept = lower.process.limit, linetype="dashed") +
annotate(geom="text", x=nrow(count.df)+1, y=lower.process.limit + 0.5, label=round(lower.process.limit, 2), colour="black",
size=4, family="sans", fontface="plain")
}
if (length(outliers > 0)) {
X.plot <- X.plot + geom_point(data=count.df[outliers,], aes(x = labels, y = x.values), colour="red", size=3)
}
mR.plot <- ggplot(data = x.ranges.df, aes(x = seq(2, nrow(x.ranges.df) + 1), y = moving.range)) +
geom_line() +
geom_point() +
geom_hline(yintercept = average.moving.range) +
annotate(geom="text", x=nrow(x.ranges.df) + 2, y=average.moving.range + 1, label=average.moving.range, colour="black",
size=4, family="sans", fontface="plain") +
geom_hline(yintercept = upper.range.limit, linetype="dashed") +
annotate(geom="text", x=nrow(x.ranges.df) + 2, y=upper.range.limit + 1, label=round(upper.range.limit, 2), colour="black",
size=4, family="sans", fontface="plain") +
ylab("mR") +
theme(axis.title.x = element_blank()) +
coord_fixed(ratio = 0.2) +
scale_y_continuous(breaks=seq(0, 30, by=10), formatter = function(x) format(x, width = 5))
library(gridExtra)
grid.arrange(X.plot, mR.plot, ncol = 1, nrow = 2)
?scale_y_continuous
X.plot <- ggplot(data = count.df, aes(x = labels, y = x.values)) +
geom_line() +
geom_point() +
geom_hline(yintercept = x.values.avg) +
annotate(geom="text", x=nrow(count.df)+1, y=x.values.avg + 0.5, label=round(x.values.avg, 2), colour="black",
size=4, family="sans", fontface="plain") +
geom_hline(yintercept = upper.process.limit, linetype="dashed") +
annotate(geom="text", x=nrow(count.df)+1, y=upper.process.limit + 0.5, label=round(upper.process.limit, 2), colour="black",
size=4, family="sans", fontface="plain") +
scale_x_continuous(labels = function(x) format(x, width = 5))
if (use.lower.limit) {
X.plot <- X.plot + geom_hline(yintercept = lower.process.limit, linetype="dashed") +
annotate(geom="text", x=nrow(count.df)+1, y=lower.process.limit + 0.5, label=round(lower.process.limit, 2), colour="black",
size=4, family="sans", fontface="plain")
}
if (length(outliers > 0)) {
X.plot <- X.plot + geom_point(data=count.df[outliers,], aes(x = labels, y = x.values), colour="red", size=3)
}
mR.plot <- ggplot(data = x.ranges.df, aes(x = seq(2, nrow(x.ranges.df) + 1), y = moving.range)) +
geom_line() +
geom_point() +
geom_hline(yintercept = average.moving.range) +
annotate(geom="text", x=nrow(x.ranges.df) + 2, y=average.moving.range + 1, label=average.moving.range, colour="black",
size=4, family="sans", fontface="plain") +
geom_hline(yintercept = upper.range.limit, linetype="dashed") +
annotate(geom="text", x=nrow(x.ranges.df) + 2, y=upper.range.limit + 1, label=round(upper.range.limit, 2), colour="black",
size=4, family="sans", fontface="plain") +
ylab("mR") +
theme(axis.title.x = element_blank()) +
coord_fixed(ratio = 0.2) +
scale_y_continuous(breaks=seq(0, 30, by=10)) +
scale_x_continuous(labels = function(x) format(x, width = 5))
library(gridExtra)
grid.arrange(X.plot, mR.plot, ncol = 1, nrow = 2)
X.plot <- ggplot(data = count.df, aes(x = labels, y = x.values)) +
geom_line() +
geom_point() +
geom_hline(yintercept = x.values.avg) +
annotate(geom="text", x=nrow(count.df)+1, y=x.values.avg + 0.5, label=round(x.values.avg, 2), colour="black",
size=4, family="sans", fontface="plain") +
geom_hline(yintercept = upper.process.limit, linetype="dashed") +
annotate(geom="text", x=nrow(count.df)+1, y=upper.process.limit + 0.5, label=round(upper.process.limit, 2), colour="black",
size=4, family="sans", fontface="plain") +
scale_x_continuous(breaks = function(x) format(x, width = 5))
if (use.lower.limit) {
X.plot <- X.plot + geom_hline(yintercept = lower.process.limit, linetype="dashed") +
annotate(geom="text", x=nrow(count.df)+1, y=lower.process.limit + 0.5, label=round(lower.process.limit, 2), colour="black",
size=4, family="sans", fontface="plain")
}
if (length(outliers > 0)) {
X.plot <- X.plot + geom_point(data=count.df[outliers,], aes(x = labels, y = x.values), colour="red", size=3)
}
mR.plot <- ggplot(data = x.ranges.df, aes(x = seq(2, nrow(x.ranges.df) + 1), y = moving.range)) +
geom_line() +
geom_point() +
geom_hline(yintercept = average.moving.range) +
annotate(geom="text", x=nrow(x.ranges.df) + 2, y=average.moving.range + 1, label=average.moving.range, colour="black",
size=4, family="sans", fontface="plain") +
geom_hline(yintercept = upper.range.limit, linetype="dashed") +
annotate(geom="text", x=nrow(x.ranges.df) + 2, y=upper.range.limit + 1, label=round(upper.range.limit, 2), colour="black",
size=4, family="sans", fontface="plain") +
ylab("mR") +
theme(axis.title.x = element_blank()) +
coord_fixed(ratio = 0.2) +
scale_y_continuous(breaks=seq(0, 30, by=10)) +
scale_x_continuous(breaks = function(x) format(x, width = 5))
library(gridExtra)
grid.arrange(X.plot, mR.plot, ncol = 1, nrow = 2)
install.packages(c("curl", "devtools", "knitr", "mgcv", "nlme", "pbkrtest", "Rcpp", "RcppEigen", "rstudioapi"))
install.packages("RevoScaleR")
library(statsr)
data("kobe_basket")
kobe_streak <- calc_streak(kobe_basket$shot)
summary(kobe_streak)
IQR(kobe_streak)
IQR(kobe_streak[,1])
?sample
pnorm(1800, mean = 1500, sd = 300)
pnorm(24, mean = 21, sd = 5)
qnorm(0.9, 1500, 300)
qnorm(0.1, 21, 5)
1 - qnorm(50, 45, 3.2)
qnorm(50, 45, 3.2)
qnorm(50, 45, 3)
qnorm(50, mean = 45, sd = 3)
?qnorm
1 - pnorm(50, 43, 3.2)
1 - pnorm(50, mean = 43, sd = 3.2)
1 - pnorm(50, mean = 45, sd = 3.2)
qnorm(.20, 72, 5)
qnorm(.20, 77, 5)
choose(100, 100)
choose(17,1)
choose(17,0)
choose(17,16)
?choose
sqrt(262*.738)
?dbinom
dbinom(6, 10, 0.56)
dbinom(2, 10, 0.56)
dbinom(6, 10, 0.56)
dbinom(600, 1000, 0.56)
dbinom(60, 100, 0.56)
sum(dbinom(60:100, 100, 0.56))
?qnorm
qnorm(1800, 1500, 300)
pnorm(1800, 1500, 300)
1 - pnorm(1800, 1500, 300)
1 - pnorm(1630, 1500, 300)
pnorm(2100, 1500, 300)
1 - pnorm(2100, 1500, 300)
pnorm(72, 70, 3.3)
pnorm(67, 70, 3.3)
pnorm(76, 70, 3.3)
qnorm(0.4, 70, 3.3)
qnorm(0.82, 70, 3.3)
qnorm(0.95, 1500, 300)
qnorm(0.975, 72, 3.3)
1 - pnorm(74, 70, 3.3)
pnorm(69, 70, 3.3)
1 - pnorm(69, 70, 3.3) - (1 - pnorm(74, 70, 3.3))
1 - pnorm(1500, 1500, 300) - (1 - pnorm(2000, 1500, 300))
1 - pnorm(65, 70, 3.3) - (1 - pnorm(67, 70, 3.3))
1 - pnorm(900, 1500, 300) - (1 - pnorm(2100, 1500, 300))
1 - pnorm(1500, 1500, 300) - (1 - pnorm(2100, 1500, 300))
?dbinom
dbinom(1, 4, 0.35)
dbinom(1, 4, 0.3)
dbinom(0, 4, 0.3)
1 - dbinom(2:4, 4, 0.3)
1 - dbinom(3, 4, 0.3)
dbinom(3, 4, 0.3)
dbinom(4, 4, 0.3)
dbinom(2, 4, 0.3)
1 - sum(dbinom(2:4, 4, 0.3))
1 - sum(dbinom(3:4, 4, 0.3))
sum(dbinom(2:4, 4, 0.3))
7*0.3
sum(dbinom(0:2, 4, 0.3))
dbinom(0, 4, 0.3)
dbinom(1, 4, 0.3)
dbinom(2, 4, 0.3)
sum(dbinom(0:2, 7, 0.3))
?choose
choose(4, 1)
choose(8, 1)
choose(8, 7)
choose(5, 4)
sum(dbinom(0:59, 400, 0.2))
?pnorm
dnorm(59, 80, 8)
dnorm(58, 80, 8)
pnorm(59, 80, 8)
sum(dbinom(69:71, 400, 0.2))
1 - pnorm(69, 80, 8) - (1 - pnorm(71, 80, 8))
?dnbinom
dnbinom(4, 6, 0.8)
dnbinom(6, 4, 0.8)
pnbinom(4, 6, 0.8)
dnbinom(4, 6, 0.8)
sum(dnbinom(0:4, 6, 0.8))
sum(dnbinom(1:4, 6, 0.8))
sum(dnbinom(4, 6, 0.8))
dnbinom(0:4, 1, 0.8)
dnbinom(0:2, 6, 0.8)
sum(dnbinom(0:2, 6, 0.8))
sum(dnbinom(1:2, 6, 0.8))
dnbinom(4, 6, 0.8)
dnbinom(0, 6, 0.8)
dnbinom(1, 6, 0.8)
dnbinom(2, 6, 0.8)
dnbinom(3, 6, 0.8)
dnbinom(4, 6, 0.8)
dnbinom(1:4, 6, 0.8)
sum(dnbinom(1:4, 6, 0.8))
cumsum(dnbinom(1:4, 6, 0.8))
sum(dnbinom(1:4, 6, 0.8))
sum(dnbinom(1:4, 4, 0.8))
sum(dnbinom(0:4, 4, 0.8))
sum(dnbinom(0:6, 4, 0.8))
sum(dnbinom(6, 4, 0.8))
sum(dnbinom(1:6, 4, 0.8))
dnbinom(0, 1, 0.8)
dnbinom(1, 1, 0.8)
dnbinom(2, 1, 0.8)
dnbinom(3, 1, 0.8)
dnbinom(4, 1, 0.8)
dnbinom(2, 4, 0.8)
dnbinom(1, 4, 0.8)
dnbinom(0, 4, 0.8)
sum(dbinom(0:1, 4, 0.8))
dbinom(0:1, 4, 0.8)
dbinom(0, 4, 0.8)
sum(dnbinom(0:1, 4, 0.8))
sum(dnbinom(0:2, 4, 0.8))
dbinom(3, 7, 0.7)
dbinom(1, 3, 0.7)
0.189 * 0.7
dnbinom(2, 2, 0.7)
dnbinom(4, 1, 0.7)
dbinom(2, 3, 0.51)
0.7 * 0.25
0.15 / 0.325
dbinom(1, 10, 0.07)
dbinom(0, 10, 0.07)
1 - dbinom(0, 10, 0.07)
sum(dbinom(1:10, 10, 0.07))
0.23 * 0.61
0.77 * 0.73
0.1403 + 0.5621
0.1403 / 0.7024
dbinom(50, 160, 0.28)
sum(dbinom(50:160, 160, 0.28))
160*0.28
sqrt(44.8*0.72)
1 - (pnorm(50, 44.8, 5.679437))
setwd("~/Dropbox/YouTube/Titanic/repo")
#
# Copyright 2012 Dave Langer
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  	http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# This R source code file corresponds to video 1 of the YouTube series
# "Introduction to Data Science with R" located at the following URL:
#     http://www.youtube.com/watch?v=32o0DnuRjfg
#
# Load raw data
train <- read.csv("train.csv", header = TRUE)
test <- read.csv("test.csv", header = TRUE)
# Add a "Survived" variable to the test set to allow for combining data sets
test.survived <- data.frame(survived = rep("None", nrow(test)), test[,])
# Combine data sets
data.combined <- rbind(train, test.survived)
# A bit about R data types (e.g., factors)
str(data.combined)
data.combined$survived <- as.factor(data.combined$survived)
data.combined$pclass <- as.factor(data.combined$pclass)
# Take a look at gross survival rates
table(data.combined$survived)
# Distribution across classes
table(data.combined$pclass)
# Load up ggplot2 package to use for visualizations
library(ggplot2)
# Hypothesis - Rich folks survived at a higer rate
train$pclass <- as.factor(train$pclass)
ggplot(train, aes(x = pclass, fill = factor(survived))) +
geom_bar() +
xlab("Pclass") +
ylab("Total Count") +
labs(fill = "Survived")
# Examine the first few names in the training data set
head(as.character(train$name))
# How many unique names are there across both train & test?
length(unique(as.character(data.combined$name)))
# Two duplicate names, take a closer look
# First, get the duplicate names and store them as a vector
dup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$name))), "name"])
# Next, take a look at the records in the combined data set
data.combined[which(data.combined$name %in% dup.names),]
# What is up with the 'Miss.' and 'Mr.' thing?
library(stringr)
# Any correlation with other variables (e.g., sibsp)?
misses <- data.combined[which(str_detect(data.combined$name, "Miss.")),]
misses[1:5,]
# Hypothesis - Name titles correlate with age
mrses <- data.combined[which(str_detect(data.combined$name, "Mrs.")), ]
mrses[1:5,]
# Check out males to see if pattern continues
males <- data.combined[which(train$sex == "male"), ]
males[1:5,]
# Expand upon the realtionship between `Survived` and `Pclass` by adding the new `Title` variable to the
# data set and then explore a potential 3-dimensional relationship.
# Create a utility function to help with title extraction
# NOTE - Using the grep function here, but could have used the str_detect function as well.
extractTitle <- function(name) {
name <- as.character(name)
if (length(grep("Miss.", name)) > 0) {
return ("Miss.")
} else if (length(grep("Master.", name)) > 0) {
return ("Master.")
} else if (length(grep("Mrs.", name)) > 0) {
return ("Mrs.")
} else if (length(grep("Mr.", name)) > 0) {
return ("Mr.")
} else {
return ("Other")
}
}
# NOTE - The code below uses a for loop which is not a very R way of
#        doing things
titles <- NULL
for (i in 1:nrow(data.combined)) {
titles <- c(titles, extractTitle(data.combined[i,"name"]))
}
data.combined$title <- as.factor(titles)
# Since we only have survived lables for the train set, only use the
# first 891 rows
ggplot(data.combined[1:891,], aes(x = title, fill = survived)) +
stat_count(width = 0.5) +
facet_wrap(~pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill = "Survived")
ggplot(data.combined[1:891,], aes(x = title, fill = Survived)) +
+   geom_histogram(binwidth = 0.5) +
+   facet_wrap(~pclass) +
+   ggtitle("Pclass") +
+   xlab("Title") +
+   ylab("Total Count") +
+   labs(fill = "Survived")
ggplot(data.combined[1:891,], aes(x = title, fill = Survived)) +
geom_histogram(binwidth = 0.5) +
facet_wrap(~pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill = "Survived")
ggplot(data.combined[1:891,], aes(x = title, fill = survived)) +
geom_histogram(binwidth = 0.5) +
facet_wrap(~pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill = "Survived")
ggplot(data.combined[1:891,], aes(x = title, fill = survived)) +
stat_count(width = 0.5) +
facet_wrap(~pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill = "Survived")
