# Trocar cabines vazias por "U"
data.combined[which(data.combined$cabin == ""), "cabin"] <- "U"
View(data.combined)
# Pegar primeiro char
cabin.first.char <- as.factor(substr(data.combined$cabin, 1, 1))
str(cabin.first.char)
levels(cabin.first.char)
data.combined$cabin.first.char <- cabin.first.char
ggplot(data.combined[1:891,]m aes(x = cabin.first.char, fill = survived)) +
geom_bar() +
ggtitle("Survivability by cabin.first.chat") +
xlab("cabin.first.char") +
ylab("Total count") +
labs(fill = "Survived")
ggplot(data.combined[1:891,], aes(x = cabin.first.char, fill = survived)) +
geom_bar() +
ggtitle("Survivability by cabin.first.chat") +
xlab("cabin.first.char") +
ylab("Total count") +
labs(fill = "Survived")
styler:::style_selection()
ggplot(data.combined[1:891, ], aes(x = cabin.first.char, fill = survived)) +
geom_bar() +
facet_wrap(~pclass) +
ggtitle("Survivability by cabin.first.chat") +
xlab("cabin.first.char") +
ylab("Total count") +
labs(fill = "Survived")
ggplot(data.combined[1:891, ], aes(x = cabin.first.char, fill = survived)) +
geom_bar() +
facet_wrap(~pclass) +
ggtitle("Survivability by cabin.first.chat, Pclass") +
xlab("cabin.first.char") +
ylab("Total count") +
labs(fill = "Survived")
View(data.combined)
ggplot(data.combined[1:891, ], aes(x = cabin.first.char, fill = survived)) +
geom_bar() +
facet_wrap(~pclass + title) +
ggtitle("Pclass, Title") +
xlab("cabin.first.char") +
ylab("Total count") +
labs(fill = "Survived")
# Pessoas com mais de uma cabine
data.combined$cabin.multiple <- as.factor(ifelse(str_detect(data.combined$cabin, " "), "Y", "N"))
View(data.combined)
ggplot(data.combined[1:891,], aes(x = cabin.multiple, fill = survived)) +
geom_bar() +
facet_wrap(~pclass + title) +
ggtitle("Pclass, Title") +
xlab("cabin.multiple") +
ylab("Total Count") +
labs(fill = "Survived")
# Avaliar onde a pessoa embarcou
str(data.combined$embarked)
levels(data.combined$embarked)
ggplot(data.combined[1:891, ], aes(x = embarked, fill = survived)) +
geom_bar() +
facet_wrap(~pclass + title) +
ggtitle("Pclass, Title") +
xlab("embarked") +
ylab("Total Count") +
labs(fill = "Survived")
ggplot(data.combined[1:891, ], aes(x = embarked, fill = survived)) +
geom_bar() +
#facet_wrap(~pclass + title) +
ggtitle("Pclass, Title") +
xlab("embarked") +
ylab("Total Count") +
labs(fill = "Survived")
ggplot(data.combined[1:891, ], aes(x = embarked, fill = survived)) +
geom_bar() +
facet_wrap(~pclass) +
ggtitle("Pclass, Title") +
xlab("embarked") +
ylab("Total Count") +
labs(fill = "Survived")
ggplot(data.combined[1:891, ], aes(x = embarked, fill = survived)) +
geom_bar() +
facet_wrap(~pclass + title) +
ggtitle("Pclass, Title") +
xlab("embarked") +
ylab("Total Count") +
labs(fill = "Survived")
library(randomForest)
install.packages("randomForest")
install.packages("randomForest")
?randomForest
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
?randomForest
View(test)
rf.train.1 <- data.combined[1:891, c("pclass", "title")]
rf.label <- as.factor(train$survived)
set.seed(1234)
rf.1 <- randomForest(x = rf.train.1, y = rf.label, importance = TRUE, ntree = 1000)
rf.1
varImpPlot(rf.1)
# Treinar o algoritmo usando pclass, title e sibsp
rf.train.2 <- data.combined[1:891, c("pclass", "title", "sibsp")]
set.seed(1234)
rf.2 <- randomForest(x = rf.train.2, y = rf.label, importance = TRUE, ntree = 100)
rf.2 <- randomForest(x = rf.train.2, y = rf.label, importance = TRUE, ntree = 1000)
rf.2 <- randomForest(x = rf.train.2, y = rf.label, importance = TRUE, ntree = 1000)
rf.2 <- randomForest(x = rf.train.2, y = rf.label, importance = TRUE, ntree = 100)
rf.2 <- randomForest(x = rf.train.2, y = rf.label, importance = TRUE, ntree = 500)
rf.2 <- randomForest(x = rf.train.2, y = rf.label, importance = TRUE, ntree = 1000)
rf.2
varImpPlot(rf.2)
set.seed(1234)
rf.2 <- randomForest(x = rf.train.2, y = rf.label, importance = TRUE, ntree = 1000)
rf.2
set.seed(1234)
rf.2 <- randomForest(x = rf.train.2, y = rf.label, importance = TRUE, ntree = 1000)
rf.2
varImpPlot(rf.2)
rf.1
rf.2
# Treinar usando pclass, title e parch
rf.train.3 <- data.combined[1:891, c("pclass", "title", "parch")]
set.seed(1234)
rf.3 <- randomForest(x = rf.train.3, y = rf.label, importance = TRUE, ntree = 1000)
rf.3
varImpPlot(rf.3)
# Combinar 2 e 3
rf.train.4 <- data.combined[1:891, c("pclass", "title", "sibsp", "parch")]
set.seed(1234)
rf.4 <- randomForest(x = rf.train.4, y = rf.label, importance = TRUE, ntree = 1000)
rf.4
varImpPlot(rf.4)
rf.1
# Treinar usando pclass, title e family.size
rf.train.5 <- data.combined[1:891, c("pclass", "title", "family.size")]
set.seed(1234)
rf.5 <- randomForest(x = rf.train.5, y = rf.label, importance = TRUE, ntree = 1000)
rf.5
varImpPlot(rf.5)
rf.4
View(rf.train.1)
rf.train.6 <- data.combined[1:891, c("pclass", "title", "sibsp", "family.size")]
set.seed(1234)
rf.6 <- randomForest(x = rf.train.6, y = rf.label, importance = TRUE, ntree = 1000)
rf.6
varImpPlot(rf.6)
varImpPlot(rf.7)
varImpPlot(rf.7)
rf.train.7 <- data.combined[1:891, c("pclass", "title", "parch", "family.size")]
set.seed(1234)
rf.7 <- randomForest(x = rf.train.7, y = rf.label, importance = TRUE, ntree = 1000)
rf.7
varImpPlot(rf.7)
varImpPlot(rf.6)
varImpPlot(rf.7)
rf.5
#
test.submit.df <- data.combined[892:1309, c("pclass", "title", "family.size")]
# Realizar a analise dos dados de teste
rf.5.preds <- predict(rf.5, test.submit.df)
table(rf.5.preds)
# Arquivo CSV para kaggle
submit.df <- data.frame(PassengerId = rep(892:1309), Survived = rf.5.preds)
write.csv(submit.df, file = "RF_SUB_20190114_1.csv", row.names = FALSE)
View(submit.df)
# O resultado do kaggle foi diferente do que sugeria  OOB
rf.5
100-18.18
install.packages("caret")
library(caret)
help(package = "caret")
install.packages("doSNOW")
library(doSNOW)
?createMultiFolds
cv.10.folds <- createMultiFolds(rf.label, k = 10, times = 10)
table(rf.label)
table(rf.label[cv.10.folds[[33]]])
342/549
308/494
ggplot(data.combined[1:891, ], aes(x = embarked, fill = survived)) +
geom_bar() +
facet_wrap(~pclass + title) +
ggtitle("Pclass, Title") +
xlab("embarked") +
ylab("Total Count") +
labs(fill = "Survived")
ctrl.1 <- trainControl(method = "repeatedcv", number = 10, repeats = 10, index = cv.10.folds)
ctrl.1 <- trainControl(method = "repeatedcv", number = 10, repeats = 10, index = cv.10.folds)
#Configurar doSNOW para treinamento multi-core
cl <- makeCluster(6, type = "SOCK")
registerDoSNOW(cl)
set.seed(34324)
rf.5.cv. <- train(x = rf.train.5, y = rf.label, method = "rf", tuneLength = 3, ntree = 1000,
trControl = ctrl.1)
install.packages("e1071")
rf.5.cv. <- train(x = rf.train.5, y = rf.label, method = "rf", tuneLength = 3, ntree = 1000,
trControl = ctrl.1)
rf.5.cv. <- train(x = rf.train.5, y = rf.label, method = "rf", tuneLength = 3, ntree = 1000,
trControl = ctrl.1)
stopCluster(cl)
rf.5.cv.1
rf.5.cv.1 <- train(x = rf.train.5, y = rf.label, method = "rf", tuneLength = 3, ntree = 1000,
trControl = ctrl.1)
#Configurar doSNOW para treinamento multi-core
cl <- makeCluster(6, type = "SOCK")
registerDoSNOW(cl)
set.seed(34324)
rf.5.cv.1 <- train(x = rf.train.5, y = rf.label, method = "rf", tuneLength = 3, ntree = 1000,
trControl = ctrl.1)
stopCluster(cl)
rf.5.cv.1
# Tentar com 5-fold repeated 10 times
set.seed(5983)
cv.5.folds <- createMultiFolds(rf.label, k = 5, times = 10)
ctrl.2 <- trainControl(method = "repeatedcv", number = 5, repeats = 10, index = cv.5.folds)
cl <- makeCluster(6, type = "SOCK")
registerDoSNOW(cl)
set.seed(89472)
rf.5.cv.2 <- train(x = rf.train.5, y = rf.label, method = "rf", tuneLength = 3,
ntree = 1000, trControl = ctrl.2)
stopCluster(cl)
rf.5.cv.2
set.seed(37596)
cv.3.folds <- createMultiFolds(rf.label, k = 3, times = 10)
ctrl.3 <- trainControl(method = "repeatedcv", number = 3, repeats = 10, index = cv.3.folds)
cl <- makeCluster(6, type = "SOCK")
registerDoSNOW(cl)
set.seed(94622)
rf.5.cv.3 <- train(x = rf.train.5, y = rf.label, method = "rf", tuneLength = 3,
ntree = 64, trControl = ctrl.3)
stopCluster(cl)
rf.5.cv.3
View(data.combined)
ggplot(data.combined[1:891,], aes(x = sibsp, fill = survived)) +
geom_bar(width = 1) +
facet_wrap(~pclass + title) +
ggtitle("Pclass, Title") +
xlab("SibSp") +
ylab("Total Count") +
ylim(0,300) +
labs(fill = " Survived")
ggplot(data.combined[1:891,], aes(x = sibsp, fill = survived)) +
geom_bar(width = 1) +
facet_wrap(~pclass + title) +
ggtitle("Pclass, Title") +
xlab("SibSp") +
ylab("Total Count") +
ylim(0,300) +
labs(fill = " Survived")
# carrega bilioteca
library(ggplot2)
ggplot(train, aes(x = pclass, fill = factor(survived))) +
geom_bar(width = 0.5) +
xlab("Pclass") +
ylab("Total Count") +
labs(fill = "Survived")
ggplot(data.combined[1:891,], aes(x = title, fill = survived)) +
geom_bar(width = 0.5) +
facet_wrap(~pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill = "Survived")
ggplot(data.combined[1:891,], aes(x = fare)) +
geom_histogram(binwidth = 5) +
ggtitle("Combined Fare Distribution") +
xlab("Fare") +
ylab("Total count")
ggplot(data.combined[1:891,], aes(x = fare, fill = survived)) +
geom_histogram(binwidth = 5) +
facet_wrap(~pclass + title) +
ggtitle("Pclass, Title") +
xlab("fare") +
ylab("Total count") +
labs(fill = "Survived")
# Identificar os nomes com Miss. Mr. ...
library(stringr)
library(randomForest)
library(caret)
library(doSNOW)
View(ctrl.1)
View(boys)
library(ggplot2)
library(stringr)
library(randomForest)
library(caret)
library(doSNOW)
#
test.submit.df <- data.combined[892:1309, c("pclass", "title", "family.size")]
# Realizar a analise dos dados de teste
rf.5.preds <- predict(rf.5, test.submit.df)
table(rf.5.preds)
# Arquivo CSV para kaggle
submit.df <- data.frame(PassengerId = rep(892:1309), Survived = rf.5.preds)
# O resultado do kaggle foi diferente do que sugeria  OOB do rf.5
# 79.42% kaggle vs 81.82% OOB
rf.5
View(submit.df)
write.csv(submit.df, file = "RF_SUB_20190114_2.csv")
?write.csv
# O resultado do kaggle foi diferente do que sugeria  OOB do rf.5
# 79.42% kaggle vs 81.82% OOB
rf.5
100 - 18.18
View(rf.5)
# O resultado do kaggle foi diferente do que sugeria  OOB do rf.5
# 79.42% kaggle vs 81.82% OOB
rf.5
help(package = "caret")
cv.10.folds <- createMultiFolds(rf.label, k = 10, times = 10)
table(rf.label)
rf.label
table(rf.label)
table(rf.label[cv.10.folds[[33]]])
308/494
342/549
table(rf.label[cv.10.folds[[30]]])
table(rf.label[cv.10.folds[[10]]])
table(rf.label[cv.10.folds[[1]]])
table(rf.label[cv.10.folds[[0]]])
table(rf.label[cv.10.folds[[1]]])
table(rf.label[cv.10.folds[[9]]])
table(rf.label[cv.10.folds[[10]]])
table(rf.label[cv.10.folds[[11]]])
table(rf.label[cv.10.folds[[12]]])
table(rf.label[cv.10.folds[[20]]])
table(rf.label[cv.10.folds[[21]]])
table(rf.label[cv.10.folds[[33]]])
table(rf.label[cv.10.folds[[100]]])
table(rf.label[cv.10.folds[[101]]])
table(rf.label[cv.10.folds[[33]]])
rf.label[cv.10.folds[[33]]]
?makeCluster
?train
rf.5.cv.1
rf.5.cv.2
rf.5.cv.3
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
library(ggplot2)
library(stringr)
library(randomForest)
library(caret)
library(doSNOW)
library(rpart)
library(rpart.plot)
ggplot(train, aes(x = pclass, fill = factor(survived))) +
geom_bar(width = 0.5) +
xlab("Pclass") +
ylab("Total Count") +
labs(fill = "Survived")
View(data.combined)
# Plot
prp(rpart.1.cv.1$finalModel, type = 0, extra = 1, under = TRUE)
library(ggplot2)
library(stringr)
library(randomForest)
library(caret)
library(doSNOW)
library(rpart)
library(rpart.plot)
# Plot
prp(rpart.1.cv.1$finalModel, type = 0, extra = 1, under = TRUE)
# Grab features
features <- c("pclass", "title", "family.size")
rpart.train.1 <- data.combined[1:891, features]
# Run CV and check out results
rpart.1.cv.1 <- rpart.cv(94622, rpart.train.1, rf.label, ctrl.3)
rpart.1.cv.1
# Plot
prp(rpart.1.cv.1$finalModel, type = 0, extra = 1, under = TRUE)
rpart.cv <- function(seed, training, labels, ctrl) {
cl <- makeCluster(6, type = "SOCK")
registerDoSNOW(cl)
set.seed(seed)
rpart.cv <- train(x = training, y = labels, method = "rpart", tuneLength = 30,
trControl = ctrl)
stopCluster(cl)
return (rpart.cv)
}
# Grab features
features <- c("pclass", "title", "family.size")
rpart.train.1 <- data.combined[1:891, features]
# Run CV and check out results
rpart.1.cv.1 <- rpart.cv(94622, rpart.train.1, rf.label, ctrl.3)
rpart.1.cv.1
# Plot
prp(rpart.1.cv.1$finalModel, type = 0, extra = 1, under = TRUE)
# Tanto RandomForest como rpart confirmar a importancia do titulo
table(data.combined$title)
# Parse out last name and title
data.combined[1:25, "name"]
name.splits <- str_split(data.combined$name, ",")
name.splits[1]
last.names <- sapply(name.splits, "[", 1)
last.names[1:10]
# Add last names no conjunto de dados para possivel uso futuramente
data.combined$last.name <- last.names
#
name.splits <- str_split(sapply(name.splits, "[", 2), " ")
titles <- sapply(name.splits, "[", 2)
unique(titles)
# Olhar as pessoas que possuem o titulo 'the'
data.combined[which(titles == 'the')]
# Olhar as pessoas que possuem o titulo 'the'
data.combined[which(titles == 'the'),]
# Tanto RandomForest como rpart confirmar a importancia do titulo
table(data.combined$title)
# Parse out last name and title
data.combined[1:25, "name"]
name.splits[1]
last.names[1:10]
name.splits[1]
# Parse out last name and title
data.combined[1:25, "name"]
name.splits <- str_split(data.combined$name, ",")
name.splits[1]
last.names <- sapply(name.splits, "[", 1)
last.names[1:10]
name.splits[1]
# Add last names no conjunto de dados para possivel uso futuramente
data.combined$last.name <- last.names
#
name.splits <- str_split(sapply(name.splits, "[", 2), " ")
name.splits[1]
titles <- sapply(name.splits, "[", 2)
titles[1:10]
unique(titles)
name.splits[1]
name.splits[1,2]
name.splits[[1],2]
name.splits[1]
name.splits[1]:1
?vector
name.splits[1](2)
name.splits[1][1]
name.splits[1][2]
name.splits[1]
name.splits[[1]][2]
name.splits[[1]][2:3]
name.splits[[1]][2]
name.splits[[1]][2]
name.splits[[]][2]
name.splits[[2]
name.splits[][2]
name.splits[[1]]
name.splits[[1:10]]
name.splits[[1,10]]
name.splits[1,10]
name.splits
length(name.splits)
name.splits[1:100]
name.splits[1:length(name.splits)]
name.splits[1:length(name.splits)][2]
name.splits[[1:length(name.splits)]][2]
tamanho.split <- length(name.splits)
tamanho.split
name.splits[[1:tamanho.split]][2]
name.splits[[1:tamanho.split]]
name.splits[1:tamanho.split]
name.splits[1:tamanho.split][2]
name.splits[1:tamanho.split][3]
#
name.splits <- str_split(sapply(name.splits, "[", 2), " ")
titles <- sapply(name.splits, "[", 2)
unique(titles)
#
name.splits <- str_split(sapply(name.splits, "[", 2), " ")
name.splits[1]
#
name.splits <- str_split(sapply(name.splits, "[", 2), " ")
name.splits[1]
str_split
name.splits <- str_split(data.combined$name, ",")
name.splits[1]
last.names <- sapply(name.splits, "[", 1)
last.names[1:10]
# Add last names no conjunto de dados para possivel uso futuramente
data.combined$last.name <- last.names
#
name.splits <- str_split(sapply(name.splits, "[", 2), " ")
name.splits[1]
titles <- sapply(name.splits, "[", 2)
unique(titles)
# Olhar as pessoas que possuem o titulo 'the'
data.combined[which(titles == 'the'),]
titles[titles %in% c("Col.", "Capt.", 'Major.')] <- "Officer"
titles[titles %in% c("Dona.", "the")] <- "Lady."
titles[titles %in% c("Ms.", "Mlle.")] <- "Miss."
titles[titles == "Mme."] <- "Mrs"
titles[titles %in% c("Jonkheer.", "Don.")] <- "Sir."
titles[titles %in% c("Col.", "Capt.", 'Major.')] <- "Officer"
table(titles)
# Transformar em factor
data.combined$new.title <- as.factor(titles)
vived)) +
geom_bar() +
facet_wrap(~ pclass) +
ggtitle("Survivel rates for new.title por pclass")
ggplot(data.combined[1:891,], aes(x = new.title, fill = survived)) +
geom_bar() +
facet_wrap(~ pclass) +
ggtitle("Survivel rates for new.title por pclass")
titles[titles == "Mrs"] <- "Mrs."
# Transformar em factor
data.combined$new.title <- as.factor(titles)
table(titles)
# Ver a nova versao de titles
ggplot(data.combined[1:891,], aes(x = new.title, fill = survived)) +
geom_bar() +
facet_wrap(~ pclass) +
ggtitle("Survivel rates for new.title por pclass")
